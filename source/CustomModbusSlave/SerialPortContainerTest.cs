using System;
using System.IO;
using System.Threading;
using CustomModbusSlave.Contracts;

namespace CustomModbusSlave {
	public class SerialPortContainerTest : ISerialPortContainer {
		private readonly byte[] _bytes = {
			0x02, 0x03, 0x22, 0x00, 0x01, 0x09, 0xFB, 0x09, 0xFC, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x0B, 0x01, 0x0C, 0x09, 0xFD, 0x09, 0xFE, 0x00, 0x0F, 0x00, 0x10, 0x00, 0x11, 0x70, 0x44 // <--- MukFlapReply

			, 0x03, 0x03, 0x24, 0x00, 0x21, 0x0A, 0x5F, 0x0A, 0x60, 0x00, 0x22, 0x00, 0x23, 0x00, 0x24, 0x00, 0x25, 0x00, 0x26, 0x00, 0x27, 0x08, 0xCF, 0x03, 0xE8, 0x01, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x00, 0x2D, 0x00, 0x2E, 0x00, 0x2F, 0x00, 0x2D, 0x2C, 0xBD

			, 0x04, 0x03, 0x18, 0x00, 0x3F, 0x00, 0x40, 0x00, 0x41, 0x00, 0x42, 0x00, 0x43, 0x00, 0x44, 0x00, 0x45, 0x00, 0x46, 0x47, 0x48, 0x07, 0xD0, 0x00, 0xAC, 0x00, 0x49, 0x60, 0x2D

			, 0x05, 0x03, 0x1A, 0x00, 0x58, 0x00, 0x59, 0x00, 0x5A, 0x00, 0x5B, 0x00, 0x5C, 0x00, 0x5D, 0x00, 0x5E, 0x00, 0x5F, 0x00, 0x60, 0x00, 0x61, 0x00, 0x62, 0x00, 0x63, 0x00, 0x64, 0x05, 0xFA
		};

		private bool _isPortOpen;
		private int _currrentPosition;

		public SerialPortContainerTest() {
			_isPortOpen = false;
			_currrentPosition = 0;
		}


		public byte[] ReadBytes(int count, TimeSpan timeout)
		{
			if (!_isPortOpen) throw new Exception("Serial port is not opened");
			var resultBytes = new byte[count];
			
			for (int i = 0; i < count; ++i) {
				resultBytes[i] = _bytes[_currrentPosition];
				_currrentPosition = _currrentPosition + 1;
				if (_currrentPosition == _bytes.Length) {
					_currrentPosition = 0;
				}
			}
			Thread.Sleep(5);
			return resultBytes;
		}

		public void CloseCurrentPort()
		{
			//if (!_isPortOpen) throw new Exception("Port allready closed");
			_isPortOpen = false;
		}

		public void SelectPort(string portName, int baudRate)
		{
			CloseCurrentPort();
			
			_isPortOpen = true;
		}
	}
}